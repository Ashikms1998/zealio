const [users, setUsers] = useState<User[]>([]);
const [searchTerm, setSearchTerm] = useState<string>('');
const [loading, setLoading] = useState<boolean>(false);

// Search Users Function (already exists)
useEffect(() => {
  const fetchUsers = async () => {
    if (searchTerm.length < 1) {
      setUsers([]);
      return;
    }
    setLoading(true);
    try {
      const response = await axios.get(`${url}/auth/users/search?q=${searchTerm}`);
      setUsers(response.data.data);
    } catch (error) {
      console.error("Error fetching users", error);
    } finally {
      setLoading(false);
    }
  };

  const delayDebounceFn = setTimeout(() => {
    fetchUsers();
  }, 500);

  return () => clearTimeout(delayDebounceFn);
}, [searchTerm]);

// New function to handle block/unblock
const toggleBlockUser = async (userId: string, isBlocked: boolean) => {
  try {
    const response = await axios.put(`${url}/auth/users/block-unblock`, { userId, isBlocked: !isBlocked });
    
    const updatedUser = response.data.updatedUser;

    // Update users state
    setUsers((prevUsers) =>
      prevUsers.map((user) =>
        user.id === updatedUser.id ? updatedUser : user
      )
    );
  } catch (error) {
    console.error("Error blocking/unblocking user", error);
  }
};

// Rendering logic
return (
  <div>
    {/* Your search input here */}
    <input
      type="text"
      value={searchTerm}
      onChange={(e) => setSearchTerm(e.target.value)}
      placeholder="Search users..."
    />

    <table>
      <tbody>
        {users.map((user) => (
          <tr key={user.id}>
            <td>{`${user.firstName} ${user.lastName}`}</td>
            <td>
              <button
                onClick={() => toggleBlockUser(user.id, user.isBlocked)}
              >
                {user.isBlocked ? 'Unblock' : 'Block'}
              </button>
            </td>
          </tr>
        ))}
      </tbody>
    </table>
  </div>
);
